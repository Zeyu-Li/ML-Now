# -*- coding: utf-8 -*-
"""tensorflow-exercises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mPgHush9bnyIax6DkYiDu82g7lryvnLx

# Tensorflow Template
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

import tensorflow as tf
import tensorflow_datasets as tfds
import datetime, os

# modified from https://www.tensorflow.org/datasets/keras_example

# gets mnist data from tensorflow dataset (from Keras)
# dataset partitioned to a 86-14 train-test ratio (idk why, since 90-10 is normal)
(train_ds, test_ds), ds_info = tfds.load("mnist", split=["train", "test"], shuffle_files=True, as_supervised=True, with_info=True)

# shape => (28, 28, 1)
print(test_ds)

# cast uint8 to float32 type
def normalize(image, label):
  return tf.cast(image, tf.float32) / 255.0, label

batch_size = 128

# convert data by mapping every 
train_ds = train_ds.map(normalize, num_parallel_calls=tf.data.experimental.AUTOTUNE)
train_ds = train_ds.cache().shuffle(ds_info.splits["train"].num_examples).batch(batch_size).prefetch(tf.data.experimental.AUTOTUNE)
# same for testing data
test_ds = test_ds.map(normalize, num_parallel_calls=tf.data.experimental.AUTOTUNE)
test_ds = test_ds.batch(128).cache().prefetch(tf.data.experimental.AUTOTUNE)

# Commented out IPython magic to ensure Python compatibility.
# Start TensorBoard within the notebook
# %tensorboard --logdir logs

# create model (28, 28) input => 128 relu hidden layers => 10 output nodes
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation="relu"),
  tf.keras.layers.Dense(10)
])
# train (since it's a wrapper module)
model.compile(
    optimizer=tf.keras.optimizers.Adam(0.001),
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=[tf.keras.metrics.SparseCategoricalAccuracy()],
)
# train then test (6 epochs)
model.fit(
    train_ds,
    epochs=6,
    validation_data=test_ds,
)

"""## Results
\* based on testing data of course

Error: 0.0832

Accuracy: 0.9734
"""

# use the following to specify which notebook to use
# from tensorboard import notebook
# notebook.list() # View open TensorBoard instances

# Control TensorBoard display. If no port is provided, 
# the most recently launched TensorBoard is used
# notebook.display(port=6006, height=1000)